// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName  String
  lastName   String
  email      String   @unique
  passwdHash String
  roles      String[]

  facultyId Int
  faculty   Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  semesterId Int
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  coursesCreated Course[]

  coursesSigned  UserCourseSigned[]
  coursesTeaches UserCourseTeaches[]

  seminarGroupSigned  UserSeminarGroupSigned[]
  seminarGroupTeaches UserSeminarGroupTeaches[]

  evaluationsGiven Evaluation[]
}

model Course {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  code        String

  capacity Int
  credits  Int

  startSign DateTime
  endSign   DateTime

  lectureStartTime DateTime
  lectureEndTime   DateTime

  semesterId Int
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  creatorId Int
  creator   User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  facultyId Int
  faculty   Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  students UserCourseSigned[]
  teachers UserCourseTeaches[]

  seminarGroups SeminarGroup[]
}

model Faculty {
  id       Int    @id @default(autoincrement())
  name     String
  logoPath String

  courses Course[]
  people  User[]
}

model Semester {
  id           Int    @id @default(autoincrement())
  year         Int
  semesterType String

  courses Course[]
  users   User[]
}

model SeminarGroup {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  students UserSeminarGroupSigned[]
  tutors   UserSeminarGroupTeaches[]
}

model Evaluation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  markId Int?
  mark   Mark? @relation(fields: [markId], references: [id], onDelete: SetNull)

  teacherSubmittedId Int?
  teacher            User? @relation(fields: [teacherSubmittedId], references: [id], onDelete: SetNull)

  userId     Int
  courseId   Int
  userCourse UserCourseSigned @relation(fields: [userId, courseId], references: [studentId, courseId], onDelete: Cascade)
}

model Mark {
  id               Int    @id @default(autoincrement())
  charRepresent    String
  numericRepresent Int

  evaluations Evaluation[]
}

// Connection tables
// Courses

model UserCourseSigned {
  studentId Int
  student   User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  isFavourite Boolean  @default(false)
  signedAt    DateTime @default(now())

  evaluationId Int?
  evaluation   Evaluation? @relation()

  @@id([studentId, courseId])
}

model UserCourseTeaches {
  teacherId Int
  teacher   User @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  isHelper   Boolean
  isTutor    Boolean
  isLecturer Boolean

  @@id([teacherId, courseId])
}

// Seminar groups

model UserSeminarGroupSigned {
  studentId Int
  student   User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  seminarGroupId Int
  seminarGroup   SeminarGroup @relation(fields: [seminarGroupId], references: [id], onDelete: Cascade)

  courseId Int

  @@id([studentId, seminarGroupId])
  @@unique([courseId])
}

model UserSeminarGroupTeaches {
  tutorId Int
  tutor   User @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  seminarGroupId Int
  seminarGroup   SeminarGroup @relation(fields: [seminarGroupId], references: [id], onDelete: Cascade)

  @@id([tutorId, seminarGroupId])
}
